generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["napi", "referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(255)
  email           String         @unique
  password        String         @db.VarChar(255)
  bio             String?
  tokenVersion    Int            @default(0)
  confirmed       Boolean        @default(false)
  profilePic      String?
  posts           Post[]
  comments        Comment[]
  hearts          Heart[]
  followers_count Int            @default(0)
  following_count Int            @default(0)
  followers       Follower[]     @relation("followerToUser")
  following       Follower[]
  notifications   Notification[]
  replies         Reply[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Follower {
  id              String   @id @default(cuid())
  followed_userId String
  follower_userId String
  followed_user   User     @relation(fields: [followed_userId], references: [id], onDelete: Cascade)
  follower_user   User     @relation(fields: [follower_userId], references: [id], name: "followerToUser", onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Post {
  id             String    @id @default(cuid())
  title          String
  body           String
  tags           String[]
  published      Boolean   @default(false)
  hearts         Heart[]
  hearts_count   Int       @default(0)
  comments_count Int       @default(0)
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  readingTimeTxt String
  readingTimeMin Float
  coverImg       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  replies        Reply[]
}

model Notification {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  seen         Boolean  @default(false)
  type         String
  notification String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Heart {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  postId    String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  postId    String
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id        String   @id @default(cuid())
  text      String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
