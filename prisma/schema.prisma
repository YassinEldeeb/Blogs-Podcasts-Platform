generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["napi", "referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String                 @db.VarChar(255)
  email                 String                 @unique
  password              String
  bio                   String?                @db.VarChar(160)
  tokenVersion          Int                    @default(0)
  confirmed             Boolean                @default(false)
  profilePic            String?
  posts                 Post[]
  comments              Comment[]
  hearts                Heart[]
  followers_count       Int                    @default(0)
  following_count       Int                    @default(0)
  followers             Follower[]             @relation("followerToUser")
  following             Follower[]
  notifications         Notification[]
  notificationsFromUser NotificationFromUser[]
  replies               Reply[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  NotificationFromUser  NotificationFromUser[] @relation("whoFired")
}

model Follower {
  id              String   @id @default(cuid())
  followed_userId String
  follower_userId String
  followed_user   User     @relation(fields: [followed_userId], references: [id], onDelete: Cascade)
  follower_user   User     @relation(fields: [follower_userId], references: [id], name: "followerToUser", onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Post {
  id             String    @id @default(cuid())
  title          String
  body           String
  tags           String[]
  published      Boolean   @default(false)
  hearts         Heart[]
  hearts_count   Int       @default(0)
  comments_count Int       @default(0)
  authorId       String
  author         User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       Comment[]
  replies        Reply[]
  readingTimeTxt String
  readingTimeMin Float
  coverImg       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Notification {
  id             String                 @id @default(cuid())
  notifiedUser   User                   @relation(fields: [notifiedUserId], references: [id], onDelete: Cascade)
  notifiedUserId String
  fromUsers      NotificationFromUser[]
  seen           Boolean                @default(false)
  message        String
  type           String
  url            String
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model NotificationFromUser {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userWhoFired   User          @relation(fields: [userWhoFiredId], references: [id], onDelete: Cascade, name: "whoFired")
  notification   Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  userId         String
  userWhoFiredId String
  notificationId String?
}

model Heart {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  authorId  String
  postId    String?
  commentId String?
  replyId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id           String   @id @default(cuid())
  text         String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId     String
  postId       String
  replies      Reply[]
  hearts       Heart[]
  hearts_count Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Reply {
  id           String   @id @default(cuid())
  text         String
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId    String
  authorId     String
  postId       String
  hearts       Heart[]
  hearts_count Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
